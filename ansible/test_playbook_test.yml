- hosts: localhost
  tasks:
    - name: Register yml output as a variable
      ansible.builtin.shell: cat inventory.yml
      register: result

    - name: Touch files with an optional mode
      vars: 
        test: 2
        mylist: 
          - 1
          - 2
          - 3
        mytags: 3
          # Application: payment
          # Environment: dev
        files:
          users: /etc/passwd
          groups: /etc/group
        files_dicts: "{{ files | dict2items(key_name='file', value_name='path') }}"
      ansible.builtin.debug:
        msg: "{{ test }}, {{ mylist }}, {{ files | dict2items }}"
    
    - name: debug from yaml
      ansible.builtin.debug:
        msg: "{{ result.stdout | from_yaml }}"
    
    - name: debug from yaml all
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: "{{ result.stdout | from_yaml_all | list }}"
    
    - name: debug combining 
      vars:
        ziplist: "{{ [1,2,3] | zip(['a', 'b', 'c', 'd']) | list }}"
        users:
          - name: alice
            authorized:
            - /tmp/alice/onekey.pub
            - /tmp/alice/twokey.pub
            groups:
            - wheel
            - docker
          - name: bob
            authorized:
            - /tmp/bob/id_rsa.pub
            groups:
            - docker
        
      ansible.builtin.debug:
        msg: "{{ ziplist }}"
    
    - name: debug objects
      vars:
        users:
          - name: alice
            authorized:
            - /tmp/alice/onekey.pub
            - /tmp/alice/twokey.pub
            groups:
            - wheel
            - docker
          - name: bob
            authorized:
            - /tmp/bob/id_rsa.pub
            groups:
            - docker
        
      ansible.builtin.debug:
        msg: "{{ users | subelements('groups', skip_missing=True) }}"
    
    - name: random values
      vars:
        random_int: "{{ 10 | random(start=1, step=2) }}"
        random_range: "{{ range(10) | list | random }}"
      ansible.builtin.debug:
        msg: "{{ random_int }}, {{ random_range }}"
    
    - name: basic operations
      vars:
        max: "{{ range(100) | max }}"
        max_value: "{{ [{'a': 1}, {'a': 2}] | max(attribute='a') }}"
      ansible.builtin.debug:
        msg:
        - "{{ max }}"
        - "{{ max_value }}" 
    
    - debug:
        msg: "truthy"
      when: str is truthy
      vars:
        str: "hello"
    
    - name: test assert
      vars:
        value: "hello"
      assert:
        that:
        - value is truthy
    
    - shell: /usr/bin/foo
      register: result
      ignore_errors: True
    
    - debug:
        msg: "failed"
      when: result is failed

    - debug:
        msg: "succeeded"
      when: result is succeeded
    
    - debug:
        msg: "{{ value }}"
      vars: 
        value: "{{ lookup('file', 'inventory.yml') }}"
    
    - debug:
        msg: "now is: {{ now() }}"

    - name: loop list
      vars:
        value: "{{ [{'name': 'n1', 'sex': 'boy'}, {'name': 'n2', 'sex': 'girl'}] }}"
      ansible.builtin.debug:
        msg:
        - "{{ item.name }}"
        - "{{ item.sex }}"
      loop: "{{ value }}"

    - name: loop dict
      vars:
        value:
          name: n1
          sex: boy
      ansible.builtin.debug:
        msg:
        - "{{ item.key }}"
        - "{{ item.value }}"
      loop: "{{ value | dict2items}}"
    
    - name: loop shell result 
      ansible.builtin.shell: "echo {{ item }}"
      loop:
      - one
      - two
      register: echout
    
    - name: check echout
      ansible.builtin.fail: 
        msg: "The command ({{ item.cmd }}) did not have a 0 return code"
      when: item.rc != 0
      loop: "{{ echout.results }}"
    
    - name: loop until
      ansible.builtin.shell: "echo {{ value }}"
      vars:
        value: 1
      register: echout
      until: echout.stdout == "1"
      retries: 3
      delay: 1

    - name: show all hostnames
      ansible.builtin.debug:
        msg: "all hosts: {{ item }}; {{ groups }}"
      loop: "{{ groups['all'] }}"
    
    - name: Show all the hosts in the current play
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: "{{ ansible_play_batch }}"

    - name: Show all the hosts in the inventory
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: "{{ query('inventory_hostnames', 'all') }}"

    - name: Show all the hosts matching the pattern, ie all but the group www
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop: "{{ query('inventory_hostnames', 'all:!www') }}"
    
    - name: loop index
      ansible.builtin.debug:
        msg: "item: {{ item }}; index: {{ idx }}; ansible_index: {{ ansible_loop.index }}/{{ ansible_loop.index0 }}; ansible_length: {{ ansible_loop.length }}"
      loop:
        - 'a'
        - 'b'
        - 'c'
      loop_control:
        index_var: idx
        pause: 1
        extended: true
    
    - name: divide
      ansible.builtin.debug:
        msg: "{{ 10 // 2 }}"
    
    - name: loop dicts
      vars:
        images:
        - name: a
          path: aab
      ansible.builtin.debug:
        msg: "{{ item.name }}, {{ item.path }}"
      loop: "{{ images }}"
    
    - name: default list
      ansible.builtin.debug:
        msg: "{{ result_load.image_names | default([]) | length }}"
    
    - name: read file to vars
      vars:
        # content: "{{ lookup('file', 'configs/chain') | split('\n') | join(',')}}"
        content: "{{ lookup('file', 'configs/chain') | split('\n')}}"
      ansible.builtin.debug:
        msg: "content: {{ content }}"
      
