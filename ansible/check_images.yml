- name: check image
  community.docker.docker_image_info:
    name: "{{ item.name }}"
  register: result_check

- name: check image.tar exists
  stat:
    path: "{{ dest_dir }}/{{ item.name }}.tar"
  register: image_data

- name: mkdir image dir
  ansible.builtin.file:
    path: "{{ dest_dir }}"
    state: directory
  when: not image_data.stat.exists

- name: copy image.tar to remote
  synchronize:
    src: "{{ item.path }}"
    dest: "{{ dest_dir }}/{{ item.name }}.tar"
    mode: push
  when: (not image_data.stat.exists) or item.reload

- name: load image
  community.docker.docker_image_load:
    path: "{{ dest_dir }}/{{ item.name }}.tar"
  register: result_load
  when: (result_check.images | length == 0) or item.reload
  until: result_load.image_names | default([]) | length == 1
  retries: 3
  delay: 1

- name: Print the loaded image names
  ansible.builtin.debug:
    msg: "Loaded the following images: {{ result_load.image_names | default([]) }}"
  when: result_load.skipped | default(false) == false
